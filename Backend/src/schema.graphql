# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type Mutation {
  createThing(
    title: String!
    originalSource: String!
    summary: ThingCreatesummaryInput!
  ): Thing!
  signup(
    email: String!
    password: String!
    displayName: String!
    name: String
    twitchName: String
  ): Member!
  login(email: String!, password: String!): Member!
  logout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): Member!
  setFeaturedImage(imageUrl: String!, thingID: ID!): Thing!
  changeThingTitle(title: String!, thingID: ID!): Thing!
  addNarrativeToThing(title: String!, thingID: ID!): Thing!
  addLinkToThing(title: String!, url: String!, thingID: ID!): Thing!
  addSummaryLineToThing(summaryLine: String!, thingID: ID!): Thing!
  removeSummaryLineFromThing(summaryLine: String!, thingID: ID!): Thing!
  addCommentToThing(comment: String!, thingID: ID!): Comment!
  deleteComment(id: ID!): Comment!
  voteOnThing(thingID: ID!): Vote
  liveChatVote(voter: ID!): Vote
  passOnThing(thingID: ID!): Pass
  liveChatPass(voter: ID!): Pass
  contenderVote(voteNumber: Int!, direction: String!, voter: ID!): SuccessMessage
  resetLiveThing: Int
  eliminateThing(thingID: ID!): Thing
  promoteThing(thingID: ID!): Thing
}

type Query {
  thing(where: ThingWhereUniqueInput!): Thing
  things(orderBy: ThingOrderByInput, first: Int, last: Int): [Thing]!
  narratives(where: NarrativeWhereInput, last: Int): [Narrative]!
  narrative(where: NarrativeWhereUniqueInput!): Narrative
  members(where: MemberWhereInput): [Member]!
  member(where: MemberWhereUniqueInput!): Member!
  commentsConnection(where: CommentWhereInput!): CommentConnection
  votesConnection(where: VoteWhereInput!): VoteConnection
  thingsConnection(where: ThingWhereInput): ThingConnection
  me: Member
  thingsForMostRecentDay: [Thing]!
  thingsForGivenDay(day: String!): [Thing]!
  thingsForNew: [Thing]!
  thingsForCurate: [Thing]!
  thingsForFinalists: [Thing]!
}

type Subscription {
   thing(where: ThingSubscriptionWhereInput): ThingSubscriptionPayload
}

type Member {
  id: ID!
  displayName: String!
  name: String
  avatar: String
  rep: Int!
  points: Int!
  giveableRep: Int!
  twitchName: String
  email: String!
  roles: [Role!]
  createdAt: DateTime!
}

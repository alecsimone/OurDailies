First up we've got the big scary thing that probably isn't that hard but is working with the part of the stack I understand least: setting up Next.js.

My plan is just to steal Wes Bos's package.json files from https://github.com/wesbos/Advanced-React/tree/master/sick-fits and then to run npm install on them and hope everything goes smoothly. There are probably a bunch of dependencies in there that I don't need, but I'm going to just use them as is for now and then try to remove any unneeded dependencies once I have a clearer view of the shape of the whole application.

Looks like everything went smoothly. Now it's time to get Next up and running to see if I can actually have some dev pages hosted locally.

First step is running "npm run dev" in the front end directory, which runs the script "next -p 7777". It failed the first time because I didn't have a pages directory, but after creating an empty pages directory we're all good.

I should point out, I'm following Wes Bos's Full Stack React course here. For now I'm not really concerned with building any of the actual OurDailies components, just with getting everything set up and gettin comfortable playing with the very basics of next and routing and all that. Actual building will come later.

Anyway, next Wes has me creating an index.js file within the pages directory. My understanding is that because I specified index.js as the main entrypoint to the app in my package.json file, this will now be the homepage of my app, and after putting a super basic react component in index.js, it looks like that's exactly what happened. And the hot reloading works too, nice! God that makes me so happy.

Now he's got me creating a second page so that we can see how to set up different pages and to link between them. It is ridiculously simple, I just created a new file called second.js in my pages directory, and bada bing bada boom it's up and running at http://localhost:7777/second. 

Linking is fairly straightforward, but has a couple wrinkles. You can, of course, just use regular anchor tags, but that doesn't give you all the advantages of Next. So instead what we do is import a Link component from Next, give it an href prop that points to the destination, and a child that is the anchor element with no href. Opening dev tools, I can see what this does is create a regular old anchor element on the page, but it's got a listener that prevents its default and instead uses all the cool Next functionality. Cool.

Finally, we built the container for the app itself. One thing I'm trying to adjust in my thinking is that this is not a collection of pages, it's an app. So where I would normally say, "the stuff that's on every page," instead I'm trying to think of it as the foundation of the app itself, which shows whatever thing is requested. 

This is drawn out in the structure of what we created. in _app.js we define the highest level structure of the app. It wraps everything in a container, which I think does some Next.js magic, and then that container has a page component, which takes another component as a child. That grandchild component is passed to the app container as a prop, and it shows up in Page as a child. So what we have is not, "we're on the Finalists page, here's the code for that." It's, "the user requested Finalists, let's load in the Finalists components." And I guess that's the core of the distinction: pages vs components.

We also created a Meta component, which contains all the basic HTML <Head> stuff. Next.js allows us to drop these anywhere down the line and edit it, but Page calls the basics, along with a header. Wes had me create a Nav element to put inside it, which I think will eventually become the round selector and be totally different, so I'm not going to go into any of that.

So just to recap, for the sake of stating it concisely:
-The app lives in _app.js
-It is given a route from either a URL or a Link
-That route corresponds to a component with the same name in the pages directory
-This component is loaded, and wrapped by the Page component, which contains the <Head> (in the Meta component) and Header.

Nice.